//------------------------------------------------------------------------------
// <auto-generated>
//     Este código se generó a partir de una plantilla.
//
//     Los cambios manuales en este archivo pueden causar un comportamiento inesperado de la aplicación.
//     Los cambios manuales en este archivo se sobrescribirán si se regenera el código.
// </auto-generated>
//------------------------------------------------------------------------------

namespace MV_P1.Models
{
    using System;
    using System.Data.Entity;
    using System.Data.Entity.Infrastructure;
    using System.Data.Entity.Core.Objects;
    using System.Linq;
    
    public partial class InventoryEntities3 : DbContext
    {
        public InventoryEntities3()
            : base("name=InventoryEntities3")
        {
        }
    
        protected override void OnModelCreating(DbModelBuilder modelBuilder)
        {
            throw new UnintentionalCodeFirstException();
        }
    
        public virtual DbSet<empleado> empleado { get; set; }
        public virtual DbSet<Maquinas> Maquinas { get; set; }
        public virtual DbSet<Tiendas> Tiendas { get; set; }
        public virtual DbSet<contra> contra { get; set; }
    
        public virtual int sp_agregar_emplado(string nombre, string seriePC, string puesto, Nullable<bool> activo)
        {
            var nombreParameter = nombre != null ?
                new ObjectParameter("nombre", nombre) :
                new ObjectParameter("nombre", typeof(string));
    
            var seriePCParameter = seriePC != null ?
                new ObjectParameter("seriePC", seriePC) :
                new ObjectParameter("seriePC", typeof(string));
    
            var puestoParameter = puesto != null ?
                new ObjectParameter("puesto", puesto) :
                new ObjectParameter("puesto", typeof(string));
    
            var activoParameter = activo.HasValue ?
                new ObjectParameter("activo", activo) :
                new ObjectParameter("activo", typeof(bool));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction("sp_agregar_emplado", nombreParameter, seriePCParameter, puestoParameter, activoParameter);
        }
    
        public virtual int sp_agregarMaquinas(string contratos, string producto, string descripcion, string seriePC, string destino, string asignada, string estatuss, string nombreUsuarioPuesto, string noCartaCustodia, Nullable<bool> activo)
        {
            var contratosParameter = contratos != null ?
                new ObjectParameter("Contratos", contratos) :
                new ObjectParameter("Contratos", typeof(string));
    
            var productoParameter = producto != null ?
                new ObjectParameter("Producto", producto) :
                new ObjectParameter("Producto", typeof(string));
    
            var descripcionParameter = descripcion != null ?
                new ObjectParameter("Descripcion", descripcion) :
                new ObjectParameter("Descripcion", typeof(string));
    
            var seriePCParameter = seriePC != null ?
                new ObjectParameter("SeriePC", seriePC) :
                new ObjectParameter("SeriePC", typeof(string));
    
            var destinoParameter = destino != null ?
                new ObjectParameter("Destino", destino) :
                new ObjectParameter("Destino", typeof(string));
    
            var asignadaParameter = asignada != null ?
                new ObjectParameter("Asignada", asignada) :
                new ObjectParameter("Asignada", typeof(string));
    
            var estatussParameter = estatuss != null ?
                new ObjectParameter("Estatuss", estatuss) :
                new ObjectParameter("Estatuss", typeof(string));
    
            var nombreUsuarioPuestoParameter = nombreUsuarioPuesto != null ?
                new ObjectParameter("NombreUsuarioPuesto", nombreUsuarioPuesto) :
                new ObjectParameter("NombreUsuarioPuesto", typeof(string));
    
            var noCartaCustodiaParameter = noCartaCustodia != null ?
                new ObjectParameter("NoCartaCustodia", noCartaCustodia) :
                new ObjectParameter("NoCartaCustodia", typeof(string));
    
            var activoParameter = activo.HasValue ?
                new ObjectParameter("Activo", activo) :
                new ObjectParameter("Activo", typeof(bool));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction("sp_agregarMaquinas", contratosParameter, productoParameter, descripcionParameter, seriePCParameter, destinoParameter, asignadaParameter, estatussParameter, nombreUsuarioPuestoParameter, noCartaCustodiaParameter, activoParameter);
        }
    
        public virtual int sp_agregarTiendas(string deptoTienda, Nullable<int> noTienda, string nombreTienda, string direccionTienda, string seriePC, Nullable<bool> activo)
        {
            var deptoTiendaParameter = deptoTienda != null ?
                new ObjectParameter("DeptoTienda", deptoTienda) :
                new ObjectParameter("DeptoTienda", typeof(string));
    
            var noTiendaParameter = noTienda.HasValue ?
                new ObjectParameter("NoTienda", noTienda) :
                new ObjectParameter("NoTienda", typeof(int));
    
            var nombreTiendaParameter = nombreTienda != null ?
                new ObjectParameter("NombreTienda", nombreTienda) :
                new ObjectParameter("NombreTienda", typeof(string));
    
            var direccionTiendaParameter = direccionTienda != null ?
                new ObjectParameter("DireccionTienda", direccionTienda) :
                new ObjectParameter("DireccionTienda", typeof(string));
    
            var seriePCParameter = seriePC != null ?
                new ObjectParameter("SeriePC", seriePC) :
                new ObjectParameter("SeriePC", typeof(string));
    
            var activoParameter = activo.HasValue ?
                new ObjectParameter("activo", activo) :
                new ObjectParameter("activo", typeof(bool));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction("sp_agregarTiendas", deptoTiendaParameter, noTiendaParameter, nombreTiendaParameter, direccionTiendaParameter, seriePCParameter, activoParameter);
        }
    
        public virtual int sp_editarEmpleado(Nullable<int> no_emp, string nombre, string puesto, string seriePC)
        {
            var no_empParameter = no_emp.HasValue ?
                new ObjectParameter("No_emp", no_emp) :
                new ObjectParameter("No_emp", typeof(int));
    
            var nombreParameter = nombre != null ?
                new ObjectParameter("nombre", nombre) :
                new ObjectParameter("nombre", typeof(string));
    
            var puestoParameter = puesto != null ?
                new ObjectParameter("puesto", puesto) :
                new ObjectParameter("puesto", typeof(string));
    
            var seriePCParameter = seriePC != null ?
                new ObjectParameter("seriePC", seriePC) :
                new ObjectParameter("seriePC", typeof(string));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction("sp_editarEmpleado", no_empParameter, nombreParameter, puestoParameter, seriePCParameter);
        }
    
        public virtual int sp_editarMaquinas(Nullable<int> conteo, string contratos, string producto, string descripcion, string seriePC, string destino, string asignada, string estatuss, string nombreUsuarioPuesto, string noCartaCustodia)
        {
            var conteoParameter = conteo.HasValue ?
                new ObjectParameter("Conteo", conteo) :
                new ObjectParameter("Conteo", typeof(int));
    
            var contratosParameter = contratos != null ?
                new ObjectParameter("Contratos", contratos) :
                new ObjectParameter("Contratos", typeof(string));
    
            var productoParameter = producto != null ?
                new ObjectParameter("Producto", producto) :
                new ObjectParameter("Producto", typeof(string));
    
            var descripcionParameter = descripcion != null ?
                new ObjectParameter("Descripcion", descripcion) :
                new ObjectParameter("Descripcion", typeof(string));
    
            var seriePCParameter = seriePC != null ?
                new ObjectParameter("SeriePC", seriePC) :
                new ObjectParameter("SeriePC", typeof(string));
    
            var destinoParameter = destino != null ?
                new ObjectParameter("Destino", destino) :
                new ObjectParameter("Destino", typeof(string));
    
            var asignadaParameter = asignada != null ?
                new ObjectParameter("Asignada", asignada) :
                new ObjectParameter("Asignada", typeof(string));
    
            var estatussParameter = estatuss != null ?
                new ObjectParameter("Estatuss", estatuss) :
                new ObjectParameter("Estatuss", typeof(string));
    
            var nombreUsuarioPuestoParameter = nombreUsuarioPuesto != null ?
                new ObjectParameter("NombreUsuarioPuesto", nombreUsuarioPuesto) :
                new ObjectParameter("NombreUsuarioPuesto", typeof(string));
    
            var noCartaCustodiaParameter = noCartaCustodia != null ?
                new ObjectParameter("NoCartaCustodia", noCartaCustodia) :
                new ObjectParameter("NoCartaCustodia", typeof(string));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction("sp_editarMaquinas", conteoParameter, contratosParameter, productoParameter, descripcionParameter, seriePCParameter, destinoParameter, asignadaParameter, estatussParameter, nombreUsuarioPuestoParameter, noCartaCustodiaParameter);
        }
    
        public virtual int sp_editarTiendas(Nullable<int> iD_Tienda, string deptoTienda, Nullable<int> noTienda, string nombreTienda, string direccionTienda, string seriePC)
        {
            var iD_TiendaParameter = iD_Tienda.HasValue ?
                new ObjectParameter("ID_Tienda", iD_Tienda) :
                new ObjectParameter("ID_Tienda", typeof(int));
    
            var deptoTiendaParameter = deptoTienda != null ?
                new ObjectParameter("DeptoTienda", deptoTienda) :
                new ObjectParameter("DeptoTienda", typeof(string));
    
            var noTiendaParameter = noTienda.HasValue ?
                new ObjectParameter("NoTienda", noTienda) :
                new ObjectParameter("NoTienda", typeof(int));
    
            var nombreTiendaParameter = nombreTienda != null ?
                new ObjectParameter("NombreTienda", nombreTienda) :
                new ObjectParameter("NombreTienda", typeof(string));
    
            var direccionTiendaParameter = direccionTienda != null ?
                new ObjectParameter("DireccionTienda", direccionTienda) :
                new ObjectParameter("DireccionTienda", typeof(string));
    
            var seriePCParameter = seriePC != null ?
                new ObjectParameter("SeriePC", seriePC) :
                new ObjectParameter("SeriePC", typeof(string));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction("sp_editarTiendas", iD_TiendaParameter, deptoTiendaParameter, noTiendaParameter, nombreTiendaParameter, direccionTiendaParameter, seriePCParameter);
        }
    
        public virtual int sp_eliminar_empleado(Nullable<int> no_emp)
        {
            var no_empParameter = no_emp.HasValue ?
                new ObjectParameter("No_emp", no_emp) :
                new ObjectParameter("No_emp", typeof(int));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction("sp_eliminar_empleado", no_empParameter);
        }
    
        public virtual int sp_eliminar_maquinas(Nullable<int> conteo)
        {
            var conteoParameter = conteo.HasValue ?
                new ObjectParameter("Conteo", conteo) :
                new ObjectParameter("Conteo", typeof(int));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction("sp_eliminar_maquinas", conteoParameter);
        }
    
        public virtual int sp_eliminar_tiendas(Nullable<int> iD_Tienda)
        {
            var iD_TiendaParameter = iD_Tienda.HasValue ?
                new ObjectParameter("ID_Tienda", iD_Tienda) :
                new ObjectParameter("ID_Tienda", typeof(int));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction("sp_eliminar_tiendas", iD_TiendaParameter);
        }
    }
}
