//------------------------------------------------------------------------------
// <auto-generated>
//     Este código se generó a partir de una plantilla.
//
//     Los cambios manuales en este archivo pueden causar un comportamiento inesperado de la aplicación.
//     Los cambios manuales en este archivo se sobrescribirán si se regenera el código.
// </auto-generated>
//------------------------------------------------------------------------------

namespace MV_P1.Models
{
    using System;
    using System.Data.Entity;
    using System.Data.Entity.Infrastructure;
    using System.Data.Entity.Core.Objects;
    using System.Linq;
    
    public partial class InventoryEntities1 : DbContext
    {
        public InventoryEntities1()
            : base("name=InventoryEntities1")
        {
        }
    
        protected override void OnModelCreating(DbModelBuilder modelBuilder)
        {
            throw new UnintentionalCodeFirstException();
        }
    
        public virtual DbSet<contratos> contratos { get; set; }
        public virtual DbSet<empleado> empleado { get; set; }
        public virtual DbSet<Maquinas> Maquinas { get; set; }
        public virtual DbSet<Tiendas> Tiendas { get; set; }
    
        public virtual int sp_editarTiendas(Nullable<int> iD_Tienda, string deptoTienda, Nullable<int> noTienda, string nombreTienda, string direccionTienda)
        {
            var iD_TiendaParameter = iD_Tienda.HasValue ?
                new ObjectParameter("ID_Tienda", iD_Tienda) :
                new ObjectParameter("ID_Tienda", typeof(int));
    
            var deptoTiendaParameter = deptoTienda != null ?
                new ObjectParameter("DeptoTienda", deptoTienda) :
                new ObjectParameter("DeptoTienda", typeof(string));
    
            var noTiendaParameter = noTienda.HasValue ?
                new ObjectParameter("NoTienda", noTienda) :
                new ObjectParameter("NoTienda", typeof(int));
    
            var nombreTiendaParameter = nombreTienda != null ?
                new ObjectParameter("NombreTienda", nombreTienda) :
                new ObjectParameter("NombreTienda", typeof(string));
    
            var direccionTiendaParameter = direccionTienda != null ?
                new ObjectParameter("DireccionTienda", direccionTienda) :
                new ObjectParameter("DireccionTienda", typeof(string));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction("sp_editarTiendas", iD_TiendaParameter, deptoTiendaParameter, noTiendaParameter, nombreTiendaParameter, direccionTiendaParameter);
        }
    
        public virtual int sp_eliminar_tiendas(Nullable<int> iD_Tienda)
        {
            var iD_TiendaParameter = iD_Tienda.HasValue ?
                new ObjectParameter("ID_Tienda", iD_Tienda) :
                new ObjectParameter("ID_Tienda", typeof(int));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction("sp_eliminar_tiendas", iD_TiendaParameter);
        }
    
        public virtual int sp_agregarTiendas(string deptoTienda, Nullable<int> noTienda, string nombreTienda, string direccionTienda, string seriePC, Nullable<bool> activo)
        {
            var deptoTiendaParameter = deptoTienda != null ?
                new ObjectParameter("DeptoTienda", deptoTienda) :
                new ObjectParameter("DeptoTienda", typeof(string));
    
            var noTiendaParameter = noTienda.HasValue ?
                new ObjectParameter("NoTienda", noTienda) :
                new ObjectParameter("NoTienda", typeof(int));
    
            var nombreTiendaParameter = nombreTienda != null ?
                new ObjectParameter("NombreTienda", nombreTienda) :
                new ObjectParameter("NombreTienda", typeof(string));
    
            var direccionTiendaParameter = direccionTienda != null ?
                new ObjectParameter("DireccionTienda", direccionTienda) :
                new ObjectParameter("DireccionTienda", typeof(string));
    
            var seriePCParameter = seriePC != null ?
                new ObjectParameter("SeriePC", seriePC) :
                new ObjectParameter("SeriePC", typeof(string));
    
            var activoParameter = activo.HasValue ?
                new ObjectParameter("activo", activo) :
                new ObjectParameter("activo", typeof(bool));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction("sp_agregarTiendas", deptoTiendaParameter, noTiendaParameter, nombreTiendaParameter, direccionTiendaParameter, seriePCParameter, activoParameter);
        }
    }
}
